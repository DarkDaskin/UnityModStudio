<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".targets" #>
<#  
    string[] gameProperties = [
        "GamePath",
        "GameModsPath",
        "GameExecutableFileName",
        "GameInstanceId",
        "ModDeploymentMode",
        "DeploySourceCode",
        "DoorstopMode",
        "UseAlternateDoorstopDllName",
    ];
    string[] gamePropertiesToClean = [
        ..gameProperties,
        "GameArchitecture"
    ];
    string[] userSpecifiedProperties = [
        "GameDisplayName",
        "GameName",
        "GameVersion",
        ..gameProperties
    ];
    string[] tasks = [
        "ResolveGameProperties",
        "ResolveGameAssemblyReferences",
        "UpdateProjectFile",
        "ConfigureDoorstop",
        "CreateSymbolicLink",
        "DeleteSymbolicLink",
        "GetSymbolicLinkTarget",
        "ResolveTargetPath",
        "RemoveEmptyDirectories",
        "GetIgnoredFiles",
        "AddGameToRegistry",
        "UpdateGameRegistry",
        "RemoveGameFromRegistry",
    ];
#>
<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <UnityModStudioTasksAssembly>$(MSBuildThisFileDirectory)..\tools\UnityModStudio.Build.dll</UnityModStudioTasksAssembly>
    <UseGameRegistry Condition="'$(UseGameRegistry)' == ''">true</UseGameRegistry>
    <GameRegistryPath>$(LOCALAPPDATA)\UnityModStudio\GameRegistry.json</GameRegistryPath>
    <_SpecifiedGameVersionType>None</_SpecifiedGameVersionType>
    <_SpecifiedGameVersionType Condition="'$(GameVersion)' != '' and $(IsSpecificGameVersionBuild) != 'true'">Single</_SpecifiedGameVersionType>
    <_SpecifiedGameVersionType Condition="'$(GameVersions)' != '' and '$(_SpecifiedGameVersionType)' != 'Single'">Multiple</_SpecifiedGameVersionType>
    <_SpecifiedGameVersionType Condition="'$(GameVersions)' != '' and '$(_SpecifiedGameVersionType)' == 'Single'">Error</_SpecifiedGameVersionType>
    <_FullIntermediateOutputPath>$(IntermediateOutputPath)</_FullIntermediateOutputPath>
    <_FullIntermediateOutputPath Condition="!$([System.IO.Path]::IsPathRooted('$(_FullIntermediateOutputPath)'))">$(MSBuildProjectDirectory)\$(_FullIntermediateOutputPath)</_FullIntermediateOutputPath>
    <_ResolvedPropertiesProjectFilePath>$(_FullIntermediateOutputPath)ResolvedGameProperties.targets</_ResolvedPropertiesProjectFilePath>
    <_ResolvedReferencesProjectFilePath>$(_FullIntermediateOutputPath)ResolvedReferences.targets</_ResolvedReferencesProjectFilePath>
    <_GamePropertiesChangeTimestampFilePath>$(_FullIntermediateOutputPath)GamePropertiesChange.timestamp</_GamePropertiesChangeTimestampFilePath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsSpecificGameVersionBuild)' != 'true' and '$(_SpecifiedGameVersionType)' == 'Multiple'">
    <BuildDependsOn>
      CoreBuild
    </BuildDependsOn>    
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      ResolveReferences;
      BuildSpecificGameVersions
    </CoreBuildDependsOn>
    <RebuildDependsOn>
      Clean;
      Build
    </RebuildDependsOn>
    <CleanDependsOn>
      CleanSpecificGameVersions;
      CoreClean
    </CleanDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <_AllGameVersions Include="$(GameVersion)" Condition="'$(_SpecifiedGameVersionType)' == 'Single'" />
    <_AllGameVersions Include="$(GameVersions)" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'" />
  </ItemGroup>

  <ItemGroup Condition="'$(IsSpecificGameVersionBuild)' != 'true'">
    <UpToDateCheckBuilt Include="$(_ResolvedPropertiesProjectFilePath)" Original="$(GameRegistryPath)" />
    <UpToDateCheckBuilt Include="$(_ResolvedReferencesProjectFilePath)" Original="$(_GamePropertiesChangeTimestampFilePath)" />
    <Clean Include="$(_ResolvedPropertiesProjectFilePath)" />
    <Clean Include="$(_ResolvedReferencesProjectFilePath)" />
  </ItemGroup>

  <Import Project="$(_ResolvedPropertiesProjectFilePath)" Condition="Exists('$(_ResolvedPropertiesProjectFilePath)')" />

  <PropertyGroup>
<# foreach (var property in userSpecifiedProperties) { #>
    <_UserSpecified<#= property #> Condition="'$(<#= property #>)' != ''">$(<#= property #>)</_UserSpecified<#= property #>>
<# } #>
  </PropertyGroup>

  <PropertyGroup>
    <GameVersion Condition="'$(GameVersion)' == ''">$(_DefaultGameVersion)</GameVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(UseGameRegistry)' == 'true'">
<# foreach (var property in gameProperties) { #>
    <<#= property #> Condition="'$(<#= property #>)' == ''">$(_Resolved<#= property #>)</<#= property #>>
<# } #>
  </PropertyGroup>

  <PropertyGroup>
    <GamePath Condition="'$(GamePath)' != '' and !HasTrailingSlash('$(GamePath)')">$(GamePath)\</GamePath>
    <GameModsPath Condition="'$(GameModsPath)' != '' and !HasTrailingSlash('$(GameModsPath)')">$(GameModsPath)\</GameModsPath>
  </PropertyGroup>

  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <TargetDir>$([MSBuild]::Escape($([System.IO.Path]::GetFullPath(`$([System.IO.Path]::Combine(`$(MSBuildProjectDirectory)`, `$(OutDir)`))`))))</TargetDir>
    <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
  </PropertyGroup>

  <Import Project="$(_ResolvedReferencesProjectFilePath)" Condition="Exists('$(_ResolvedReferencesProjectFilePath)')" />

<# foreach (var task in tasks) { #>
  <UsingTask TaskName="<#= task #>" AssemblyFile="$(UnityModStudioTasksAssembly)" />
<# } #>

  <Target Name="CleanResolvedData" AfterTargets="CoreClean" Condition="'$(IsSpecificGameVersionBuild)' != 'true'">
    <PropertyGroup>
<# foreach (var property in gamePropertiesToClean) { #>
      <<#= property #> Condition="'$(_UserSpecified<#= property #>)' == ''" />
<# } #>
    </PropertyGroup>
    <ItemGroup>
      <Reference Remove="@(Reference)" Condition="'%(Reference.IsImplicitlyDefinedGameReference)' == 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="_ErrorOnWrongGameVersionType" BeforeTargets="PrepareForBuild" Condition="'$(_SpecifiedGameVersionType)' == 'Error'">
    <Error Code="UMS0001" Text="Both GameVersion and GameVersions properties are specified, but they are mutually exclusive." />
  </Target>

  <Target Name="ResolveGameVersions" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'">
    <PropertyGroup>
      <_DefaultGameVersion>%(_AllGameVersions.Identity)</_DefaultGameVersion>
    </PropertyGroup>
    <ItemGroup>
      <_OtherGameVersions Include="@(_AllGameVersions)" Exclude="$(_DefaultGameVersion)" />
    </ItemGroup>
  </Target>

  <Target Name="_CheckOutputPaths" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GetIntermediateOutputPathForGameVersion" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true">
      <Output TaskParameter="TargetOutputs" ItemName="_AllIntermediateOutputPaths" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GetOutDirForGameVersion" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true">
      <Output TaskParameter="TargetOutputs" ItemName="_AllOutDirs" />
    </MSBuild>
    <PropertyGroup>
      <_HasIntermediateOutputPathClash Condition="@(_AllGameVersions->Count()) != @(_AllIntermediateOutputPaths->Distinct()->Count())">true</_HasIntermediateOutputPathClash>
      <_HasOutDirClash Condition="@(_AllGameVersions->Count()) != @(_AllOutDirs->Distinct()->Count())">true</_HasOutDirClash>
    </PropertyGroup>
  </Target>

  <Target Name="_GetIntermediateOutputPathForGameVersion" Returns="$(IntermediateOutputPath)" />

  <Target Name="_GetOutDirForGameVersion" Returns="$(OutDir)" />

  <Target Name="ResolveGameProperties" BeforeTargets="GamePropertiesResolved" DependsOnTargets="ResolveGameVersions;_CheckOutputPaths" Condition="'$(UseGameRegistry)' == 'true' and '$(IsSpecificGameVersionBuild)' != 'true'" 
          Inputs="$(GameRegistryPath);$(MSBuildProjectFullPath)" Outputs="$(_ResolvedPropertiesProjectFilePath)">
    <ItemGroup>
      <_ResolvedProperty Include="_DefaultGameVersion" Value="$(_DefaultGameVersion)" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_ResolveGamePropertiesInner" Properties="GameVersion=$(GameVersion);IsSpecificGameVersionBuild=true" Condition="'$(_SpecifiedGameVersionType)' != 'Multiple'">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedPropertyForDefaultGameVersion" />
    </MSBuild>    
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_ResolveGamePropertiesInner" Properties="GameVersion=$(_DefaultGameVersion);IsSpecificGameVersionBuild=true" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple' and '$(_DefaultGameVersion)' != ''">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedPropertyForDefaultGameVersion" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_ResolveGamePropertiesInner" Properties="GameVersion=%(_OtherGameVersions.Identity);IsSpecificGameVersionBuild=true" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple' and '@(_OtherGameVersions)' != ''">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProperty" />
    </MSBuild>

    <ItemGroup>
      <_ResolvedProperty Include="@(_ResolvedPropertyForDefaultGameVersion)" />
    </ItemGroup>

    <PropertyGroup>
      <_GamePathChanged Condition="'%(_ResolvedProperty.Identity)' == '_GamePathChanged'">true</_GamePathChanged>
    </PropertyGroup>

    <ItemGroup>
      <_ResolvedProperty Include="IntermediateOutputPath" Value="$(IntermediateOutputPath)%(_AllGameVersions.Identity)\" GameVersion="%(_AllGameVersions.Identity)" ConditionExpression="'%24(GameVersion)' == '%(_AllGameVersions.Identity)'" Condition="'$(_HasIntermediateOutputPathClash)' == 'true'" />
      <_ResolvedProperty Include="OutDir" Value="$(OutDir)%(_AllGameVersions.Identity)\" GameVersion="%(_AllGameVersions.Identity)" ConditionExpression="'%24(GameVersion)' == '%(_AllGameVersions.Identity)'" Condition="'$(_HasOutDirClash)' == 'true'" />
      <_ResolvedProperty Remove="@(_ResolvedProperty)" Condition="'%(_ResolvedProperty.IsTemporary)' == 'true'" />
    </ItemGroup>
    <UpdateProjectFile ProjectFile="$(_ResolvedPropertiesProjectFilePath)" Properties="@(_ResolvedProperty)" />

    <PropertyGroup>
<# foreach (var property in gameProperties) { #>
      <<#= property #> Condition="'$(_UserSpecified<#= property #>)' == '' and '%(_ResolvedPropertyForDefaultGameVersion.Identity)' == '_Resolved<#= property #>'">%(_ResolvedPropertyForDefaultGameVersion.Value)</<#= property #>>
<# } #>
    </PropertyGroup>

    <PropertyGroup>
      <IntermediateOutputPath Condition="'$(_HasIntermediateOutputPathClash)' == 'true'">$(IntermediateOutputPath)$(_DefaultGameVersion)\</IntermediateOutputPath>
      <OutDir Condition="'$(_HasOutDirClash)' == 'true'">$(OutDir)$(_DefaultGameVersion)\</OutDir>
    </PropertyGroup>

    <ItemGroup>
      <_AllGameVersionsWithPaths Include="%(_ResolvedProperty.GameVersion)" GamePath="%(_ResolvedProperty.Value)" Condition="'%(_ResolvedProperty.Identity)' == '_ResolvedGamePath'" />
      <_AllGameVersions GamePath="@(_AllGameVersionsWithPaths->'%(GamePath)')" Condition="'%(Identity)' != '' and '@(_AllGameVersions)' != '' and '@(_AllGameVersionsWithPaths)' != ''" />
      <_OtherGameVersions GamePath="@(_AllGameVersionsWithPaths->'%(GamePath)')" Condition="'%(Identity)' != '' and '@(_OtherGameVersions)' != '' and '@(_AllGameVersionsWithPaths)' != ''" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveGamePropertiesInner" Returns="@(_ResolvedProperty)">
    <PropertyGroup>
      <_PreviousGamePath>$(_ResolvedGamePath)</_PreviousGamePath>
    </PropertyGroup>
    <ItemGroup>
      <GameLookupProperty Include="Id" Value="$(GameInstanceId)" Condition="'$(GameInstanceId)' != ''" />
      <GameLookupProperty Include="GameName" Value="$(GameName)" Condition="'$(GameName)' != ''" />
      <GameLookupProperty Include="Version" Value="$(GameVersion)" Condition="'$(GameVersion)' != ''" />
    </ItemGroup>
    <ResolveGameProperties LookupProperties="@(GameLookupProperty)" BuildingInsideVisualStudio="$(BuildingInsideVisualStudio)">
<# foreach (var property in gameProperties) { #>
      <Output TaskParameter="<#= property #>" PropertyName="_Resolved<#= property #>" />
<# } #>
    </ResolveGameProperties>
    <ItemGroup>
<# foreach (var property in gameProperties) { #>
      <_ResolvedProperty Include="_Resolved<#= property #>" Value="$(_Resolved<#= property #>)" Condition="'$(_Resolved<#= property #>)' != ''" />
<# } #>
      <_ResolvedProperty ConditionExpression="'%24(GameVersion)' == '$(GameVersion)'" GameVersion="$(GameVersion)" Condition="'$(GameVersion)' != ''" />
      <_ResolvedProperty Include="_GamePathChanged" IsTemporary="true" GameVersion="$(GameVersion)" Condition="'$(_ResolvedGamePath)' != '$(_PreviousGamePath)'" />
    </ItemGroup>
  </Target>

  <Target Name="GamePropertiesResolved" />

  <Target Name="UpdateGamePropertiesChangeTimestamp" BeforeTargets="ResolveGameAssemblyReferences" Condition="'$(GamePath)' != '$(_PreviousGamePath)'">
    <Touch Files="$(_GamePropertiesChangeTimestampFilePath)" AlwaysCreate="true" />
  </Target>

  <Target Name="ResolveGameAssemblyReferences" BeforeTargets="ResolveAssemblyReferences;GameAssemblyReferencesResolved" DependsOnTargets="GamePropertiesResolved" 
          Inputs="$(_GamePropertiesChangeTimestampFilePath);$(MSBuildProjectFullPath)" Outputs="$(_ResolvedReferencesProjectFilePath)" Condition="'$(IsSpecificGameVersionBuild)' != 'true'">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_ResolveGameAssemblyReferencesInner" Properties="GameVersion=$(_DefaultGameVersion);GamePath=$(GamePath);IsSpecificGameVersionBuild=true">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedReferenceItemForDefaultGameVersion" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_ResolveGameAssemblyReferencesInner" Properties="GameVersion=%(_OtherGameVersions.Identity);GamePath=%(_OtherGameVersions.GamePath);IsSpecificGameVersionBuild=true" Condition="'@(_OtherGameVersions)' != ''">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedReferenceItem" />
    </MSBuild>

    <ItemGroup>
      <_ResolvedReferenceItemForDefaultGameVersion IsDefault="true" />
      <_ResolvedReferenceItem Include="@(_ResolvedReferenceItemForDefaultGameVersion)" />
      <_ResolvedReferenceProperty Include="@(_ResolvedReferenceItem)" Condition="'%(OutputGroup)' == '_ResolvedReferenceProperty'" />
      <_GameReferenceToSave Include="@(_ResolvedReferenceItem)" Condition="'%(OutputGroup)' == '_GameReferenceToSave'" />
      <_GameReferencesToAdd Include="@(_GameReferenceToSave)" Condition="'%(ItemAction)' == 'Include' and '%(_GameReferenceToSave.IsDefault)' == 'true'" />
      <_GameReferencesToUpdate Include="@(_GameReferenceToSave)" Condition="'%(ItemAction)' == 'Update' and '%(_GameReferenceToSave.IsDefault)' == 'true'" />
      <_GameReferencesToRemove Include="@(_GameReferenceToSave)" Condition="'%(ItemAction)' == 'Remove' and '%(_GameReferenceToSave.IsDefault)' == 'true'" />
    </ItemGroup>

    <PropertyGroup>
      <GameArchitecture Condition="'%(_ResolvedReferenceItemForDefaultGameVersion.Identity)' == 'GameArchitecture'">%(_ResolvedReferenceItemForDefaultGameVersion.Value)</GameArchitecture>
    </PropertyGroup>

    <ItemGroup>
      <Reference Remove="@(_GameReferencesToRemove)" />
      <Reference Update="@(_GameReferencesToUpdate)" />
      <Reference Include="@(_GameReferencesToAdd)" Condition="'$(DisableImplicitFrameworkReferences)' != 'true'" />
    </ItemGroup>

    <UpdateProjectFile ProjectFile="$(_ResolvedReferencesProjectFilePath)" Properties="@(_ResolvedReferenceProperty)" Items="@(_GameReferenceToSave)" ItemNames="Reference" />
  </Target>

  <Target Name="_ResolveGameAssemblyReferencesInner" Returns="@(_TaskOutput)">
    <ItemGroup>
      <Reference Remove="@(Reference->WithMetadataValue('IsImplicitlyDefinedGameReference', 'true'))" />
    </ItemGroup>

    <PropertyGroup>
      <GamePath Condition="'$(GamePath)' == ''">$(_ResolvedGamePath)</GamePath>
    </PropertyGroup>

    <ResolveGameAssemblyReferences GamePath="$(GamePath)" TargetFramework="$(TargetFramework)" ExistingReferences="@(Reference)">
      <Output TaskParameter="Architecture" PropertyName="GameArchitecture" />
      <Output TaskParameter="ReferencesToAdd" ItemName="_GameReferencesToAdd" />
      <Output TaskParameter="ReferencesToUpdate" ItemName="_GameReferencesToUpdate" />
      <Output TaskParameter="ReferencesToRemove" ItemName="_GameReferencesToRemove" />
    </ResolveGameAssemblyReferences>

    <ItemGroup>
      <_ResolvedReferenceProperty Include="GameArchitecture" Value="$(GameArchitecture)" />
      <_GameReferenceToSave Include="@(_GameReferencesToAdd)" ItemName="Reference" ItemAction="Include" IncludeMetadata="HintPath;Private;IsImplicitlyDefined;IsImplicitlyDefinedGameReference"
                            Condition="'$(DisableImplicitFrameworkReferences)' != 'true'" />
      <_GameReferenceToSave Include="@(_GameReferencesToUpdate)" ItemName="Reference" ItemAction="Update" IncludeMetadata="HintPath;Private" />
      <_GameReferenceToSave Include="@(_GameReferencesToRemove)" ItemName="Reference" ItemAction="Remove" />
      <_TaskOutput Include="@(_ResolvedReferenceProperty)" OutputGroup="_ResolvedReferenceProperty" />
      <_TaskOutput Include="@(_GameReferenceToSave)" OutputGroup="_GameReferenceToSave" />
      <_TaskOutput ConditionExpression="'%24(GameVersion)' == '$(GameVersion)'" Condition="'$(GameVersion)' != ''" />
    </ItemGroup>
  </Target>

  <Target Name="GameAssemblyReferencesResolved" />

  <Target Name="BuildSpecificGameVersions" Returns="@(InnerOutput)">
    <!-- BypassCache=1 is here so Resolved*.targets are re-read during build. The properties just have to be different from earlier MSBuild invocations. -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Build" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true;BypassCache=1">
      <Output TaskParameter="TargetOutputs" ItemName="InnerOutput" />
    </MSBuild>
  </Target>
  
  <Target Name="CleanSpecificGameVersions">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Clean" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true" />
  </Target>

  <Target Name="PrepareModPaths" DependsOnTargets="GamePropertiesResolved">
    <PropertyGroup>
      <GameModsPath Condition="'$(GameModsPath)' == ''">.\</GameModsPath>
    </PropertyGroup>
    <CombinePath BasePath="$(GamePath)" Paths="$(GameModsPath)">
      <Output TaskParameter="CombinedPaths" PropertyName="GameModsPath" />
    </CombinePath>

    <PropertyGroup>
      <ModTargetPath Condition="'$(ModTargetPath)' == ''">$(GameModsPath)$(ProjectName)\</ModTargetPath>
      <ModSourcePath Condition="'$(ModSourcePath)' == ''">$(TargetDir)</ModSourcePath>
    </PropertyGroup>

    <ConvertToAbsolutePath Paths="$(ModSourcePath)">
      <Output TaskParameter="AbsolutePaths" PropertyName="ModSourcePath" />
    </ConvertToAbsolutePath>

    <ItemGroup>
      <_CompiledModAssembly Include="$(TargetDir)$(TargetFileName)" />
    </ItemGroup>
    <ResolveTargetPath RelativeToPath="$(ModSourcePath)" Input="@(_CompiledModAssembly)">
      <Output TaskParameter="Output" ItemName="_ResolvedCompiledModAssembly" />
    </ResolveTargetPath>
    <PropertyGroup>
      <DeployedModAssemblyPath>$(ModTargetPath)%(_ResolvedCompiledModAssembly.TargetPath)$(TargetFileName)</DeployedModAssemblyPath>
    </PropertyGroup>
  </Target>

  <Target Name="GetModSourceCodeFiles" BeforeTargets="CopyModFilesToGame" DependsOnTargets="PrepareModPaths" Condition="'$(DeploySourceCode)' == 'true'">
    <ItemGroup>
      <_IgnoreListFile Include="$(ModSourcePath)**\.gitignore" />
      <_IgnoreListFile Include="$(MSBuildThisFileDirectory)..\tools\default.gitignore" Condition="'@(_IgnoreListFile)' == ''" />
    </ItemGroup>
    <GetIgnoredFiles Directory="$(ModSourcePath)" IgnoreListFiles="@(_IgnoreListFile)">
      <Output TaskParameter="IgnoredFiles" ItemName="_IgnoredFile" />
    </GetIgnoredFiles>

    <ItemGroup>
      <ModSourceCodeFile Include="$(ModSourcePath)**\*" Exclude="@(_IgnoredFile)" />
    </ItemGroup>
  </Target>

  <!-- Not so fun fact: formerly named CopyModToGame, that name broke MSBuild somehow -->
  <Target Name="CopyModFilesToGame" AfterTargets="PrepareForRun" DependsOnTargets="PrepareModPaths" Condition="'$(ModDeploymentMode)' == 'Copy'">
    <ItemGroup>
      <_ModCompiledOutput Include="$(TargetDir)**\*" />
      <_ModContentFile Include="@(Content)" />
      <ModExcludedFile />
      <ModFile Include="%(_ModCompiledOutput.FullPath)" KeepDuplicates="false" />
      <ModFile Include="%(_ModContentFile.FullPath)" KeepDuplicates="false" />
      <ModFile Include="%(ModSourceCodeFile.FullPath)" KeepDuplicates="false" />
      <ModFile Remove="%(ModExcludedFile.FullPath)" />
    </ItemGroup>
    <ResolveTargetPath RelativeToPath="$(ModSourcePath)" Input="@(ModFile)">
      <Output TaskParameter="Output" ItemName="_ModFileToCopy" />
    </ResolveTargetPath>
    
    <GetSymbolicLinkTarget SymbolicLink="$(ModTargetPath)">
      <Output TaskParameter="Target" PropertyName="_ModTargetPathLinkTarget" />
    </GetSymbolicLinkTarget>
    <DeleteSymbolicLink Path="$(ModTargetPath)" Condition="Exists('$(ModTargetPath)') and '$(_ModTargetPathLinkTarget)' != ''" />

    <MakeDir Directories="$(ModTargetPath)" Condition="!Exists('$(ModTargetPath)')" />
    <Copy SourceFiles="@(_ModFileToCopy->HasMetadata('TargetPath'))" DestinationFolder="$(ModTargetPath)%(TargetPath)" SkipUnchangedFiles="true">
      <Output TaskParameter="CopiedFiles" ItemName="_FileCopiedToModTargetPath" />
    </Copy>

    <ItemGroup>
      <_FileToRemoveFromModTargetPath Include="$(ModTargetPath)**\*" />
      <_FileToRemoveFromModTargetPath Remove="@(_FileCopiedToModTargetPath)" MatchOnMetadata="FullPath" />
    </ItemGroup>
    <Delete Files="@(_FileToRemoveFromModTargetPath)" />
    <RemoveEmptyDirectories Directories="$(ModTargetPath)" />
  </Target>

  <Target Name="LinkModToGame" AfterTargets="PrepareForRun" DependsOnTargets="PrepareModPaths" Condition="'$(ModDeploymentMode)' == 'Link'">
    <GetSymbolicLinkTarget SymbolicLink="$(ModTargetPath)">
      <Output TaskParameter="Target" PropertyName="_ModTargetPathLinkTarget" />
    </GetSymbolicLinkTarget>
    <ConvertToAbsolutePath Paths="$(_ModTargetPathLinkTarget)" Condition="'$(_ModTargetPathLinkTarget)' != ''">
      <Output TaskParameter="AbsolutePaths" PropertyName="_ModTargetPathLinkTarget" />
    </ConvertToAbsolutePath>
    <RemoveDir Directories="$(ModTargetPath)" Condition="Exists('$(ModTargetPath)') and '$(_ModTargetPathLinkTarget)' == ''" />
    <DeleteSymbolicLink Path="$(ModTargetPath)" Condition="Exists('$(ModTargetPath)') and '$(_ModTargetPathLinkTarget)' != '' and '$(_ModTargetPathLinkTarget)' != '$(ModSourcePath)'" />

    <CreateSymbolicLink Target="$(ModSourcePath)" SymbolicLink="$(ModTargetPath)" Condition="!Exists('$(ModTargetPath)')" />
    
  </Target>

  <Target Name="DeployDoorstop" DependsOnTargets="GamePropertiesResolved;GameAssemblyReferencesResolved" Condition="'$(DoorstopMode)' != '' and '$(DoorstopMode)' != 'Disabled'">
    <ItemGroup>
      <DoorstopNativeFile Include="$(MSBuildThisFileDirectory)..\runtimes\win-x86\native\**" Condition="'$(GameArchitecture)' == 'X86'" />
      <DoorstopNativeFile Include="$(MSBuildThisFileDirectory)..\runtimes\win-x64\native\**" Condition="'$(GameArchitecture)' == 'X64'" />
      <DoorstopContentFile Include="$(MSBuildThisFileDirectory)..\content\**" />
    </ItemGroup>

    <Error Code="UMS0003" Text="No Unity Doorstop native files available for architecture '$(GameArchitecture)'" Condition="'@(DoorstopNativeFile)' == ''" />

    <PropertyGroup>
      <_PrimaryDoorstopDllPath>$(GamePath)winhttp.dll</_PrimaryDoorstopDllPath>
      <_AlternateDoorstopDllPath>$(GamePath)version.dll</_AlternateDoorstopDllPath>
    </PropertyGroup>

    <Copy SourceFiles="@(DoorstopNativeFile)" DestinationFolder="$(GamePath)" SkipUnchangedFiles="True" Condition="!Exists('$(_PrimaryDoorstopDllPath)') and !Exists('$(_AlternateDoorstopDllPath)')" />
    <Move SourceFiles="$(_PrimaryDoorstopDllPath)" DestinationFiles="$(_AlternateDoorstopDllPath)" Condition="Exists('$(_PrimaryDoorstopDllPath)') and '$(UseAlternateDoorstopDllName)' == 'True'" />
    <Move SourceFiles="$(_AlternateDoorstopDllPath)" DestinationFiles="$(_PrimaryDoorstopDllPath)" Condition="Exists('$(_AlternateDoorstopDllPath)') and '$(UseAlternateDoorstopDllName)' != 'True'" />
    <Copy SourceFiles="@(DoorstopContentFile)" DestinationFolder="$(GamePath)" Condition="!Exists('$(GamePath)%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="ConfigureDoorstop" AfterTargets="CopyModFilesToGame;LinkModToGame" DependsOnTargets="DeployDoorstop;PrepareModPaths" Condition="'$(DoorstopMode)' != '' and '$(DoorstopMode)' != 'Disabled'">
    <PropertyGroup>
      <DoorstopConfigFile>$(GamePath)doorstop_config.ini</DoorstopConfigFile>
    </PropertyGroup>

    <ConfigureDoorstop ConfigPath="$(DoorstopConfigFile)" TargetAssemblyPath="$(DeployedModAssemblyPath)" />
  </Target>

  <Target Name="AddGameToRegistry">
    <AddGameToRegistry Path="$(_UserSpecifiedGamePath)" DisplayName="$(_UserSpecifiedGameDisplayName)" ModsPath="$(_UserSpecifiedGameModsPath)" Version="$(_UserSpecifiedGameVersion)" 
                       ModDeploymentMode="$(_UserSpecifiedModDeploymentMode)" DeploySourceCode="$(_UserSpecifiedDeploySourceCode)" DoorstopMode="$(_UserSpecifiedDoorstopMode)" 
                       UseAlternateDoorstopDllName="$(_UserSpecifiedUseAlternateDoorstopDllName)" />
  </Target>

  <Target Name="UpdateGameRegistry">
    <UpdateGameRegistry Id="$(_UserSpecifiedGameInstanceId)" DisplayName="$(_UserSpecifiedGameDisplayName)" GameName="$(_UserSpecifiedGameName)" Version="$(_UserSpecifiedGameVersion)" 
                        Path="$(_UserSpecifiedGamePath)" ModsPath="$(_UserSpecifiedGameModsPath)" ModDeploymentMode="$(_UserSpecifiedModDeploymentMode)" DeploySourceCode="$(_UserSpecifiedDeploySourceCode)"
                        DoorstopMode="$(_UserSpecifiedDoorstopMode)" UseAlternateDoorstopDllName="$(_UserSpecifiedUseAlternateDoorstopDllName)" />
  </Target>

  <Target Name="RemoveGameFromRegistry">
    <RemoveGameFromRegistry Id="$(_UserSpecifiedGameInstanceId)" DisplayName="$(_UserSpecifiedGameDisplayName)" GameName="$(_UserSpecifiedGameName)" Version="$(_UserSpecifiedGameVersion)" />
  </Target>

</Project>