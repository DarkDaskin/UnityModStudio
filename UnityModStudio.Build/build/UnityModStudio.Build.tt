<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".targets" #>
<#@ include file="UnityModStudio.ttinclude"#>
<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)UnityModStudio.Common.targets" />

  <PropertyGroup>
    <UseGameRegistry Condition="'$(UseGameRegistry)' == ''">true</UseGameRegistry>
    <_SpecifiedGameVersionType>None</_SpecifiedGameVersionType>
    <_SpecifiedGameVersionType Condition="'$(GameVersions)' != ''">Multiple</_SpecifiedGameVersionType>
    <_SpecifiedGameVersionType Condition="'$(GameVersion)' != '' and $(_SpecifiedGameVersionType) != 'Multiple'">Single</_SpecifiedGameVersionType>
    <_FullIntermediateOutputPath>$(IntermediateOutputPath)</_FullIntermediateOutputPath>
    <_FullIntermediateOutputPath Condition="!$([System.IO.Path]::IsPathRooted('$(_FullIntermediateOutputPath)'))">$(MSBuildProjectDirectory)\$(_FullIntermediateOutputPath)</_FullIntermediateOutputPath>
    <_OutputPathsCheckResultProjectFilePath>$(_FullIntermediateOutputPath)$(MSBuildProjectName).OutputPathsCheckResult.targets</_OutputPathsCheckResultProjectFilePath>
  </PropertyGroup>

  <ItemGroup>
    <_AllGameVersions Include="$(GameVersion)" KeepDuplicates="false" Condition="'$(_SpecifiedGameVersionType)' == 'Single'" />
    <_AllGameVersions Include="$(GameVersions)" KeepDuplicates="false" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'" />
  </ItemGroup>

  <ItemGroup>
    <_AllGameVersionsForAllTargetFrameworks Include="$([MSBuild]::Unescape('$(_AllGameVersionsForAllTargetFrameworksEscaped)'))" Condition="'$(IsInnerBuild)' == 'true'" />
    <_AllGameVersionsForAllTargetFrameworks Include="@(_AllGameVersions)" Condition="'$(IsInnerBuild)' != 'true'" />
  </ItemGroup>

  <PropertyGroup>
    <_EffectiveGameVersionType>None</_EffectiveGameVersionType>
    <_EffectiveGameVersionType Condition="'$(GameVersion)' != '' and ('$(_SpecifiedGameVersionType)' != 'Multiple' or '$(IsSpecificGameVersionBuild)' == 'true')">Single</_EffectiveGameVersionType>
    <_EffectiveGameVersionType Condition="'$(_EffectiveGameVersionType)' != 'Single' and '$(_SpecifiedGameVersionType)' == 'Multiple'">Multiple</_EffectiveGameVersionType>
    <GameVersion Condition="'$(GameVersion)' == '' and '$(_EffectiveGameVersionType)' == 'Single'">$(GameVersions)</GameVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(_EffectiveGameVersionType)' == 'Multiple'">
    <_DefaultGameVersionProjectFilePath>$(_FullIntermediateOutputPath)$(MSBuildProjectName).DefaultGameVersion.targets</_DefaultGameVersionProjectFilePath>
  </PropertyGroup>

  <Import Project="$(_DefaultGameVersionProjectFilePath)" Condition="'$(DesignTimeBuild)' == 'true' and Exists('$(_DefaultGameVersionProjectFilePath)')" />

  <PropertyGroup Condition="'$(DesignTimeBuild)' == 'true'">
    <_UserSpecifiedDefaultGameVersion Condition="'$(DefaultGameVersion)' != ''">$(DefaultGameVersion)</_UserSpecifiedDefaultGameVersion>
    <DefaultGameVersion Condition="'$(DefaultGameVersion)' == ''">$(_ResolvedDefaultGameVersion)</DefaultGameVersion>
    <GameVersion Condition="'$(_EffectiveGameVersionType)' == 'Multiple'">$(DefaultGameVersion)</GameVersion>
  </PropertyGroup>

  <Import Project="$(_OutputPathsCheckResultProjectFilePath)" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple' and Exists('$(_OutputPathsCheckResultProjectFilePath)')" />

  <Import Project="$(_GameSpecificPropertiesProjectFilePath)" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple' and '$(IsInnerBuild)' != 'true' and Exists('$(_GameSpecificPropertiesProjectFilePath)')" />

  <PropertyGroup>
    <IntermediateOutputPath Condition="'$(HasIntermediateOutputPathClash)' == 'true'">$(IntermediateOutputPath)$(GameVersion)\</IntermediateOutputPath>
    <OutDir Condition="'$(HasOutDirClash)' == 'true'">$(OutDir)$(GameVersion)\</OutDir>
  </PropertyGroup>

  <PropertyGroup>
    <_ResolvedDataProjectsFileNameSuffix Condition="'$(_EffectiveGameVersionType)' == 'None'" />
    <_ResolvedDataProjectsFileNameSuffix Condition="'$(_EffectiveGameVersionType)' == 'Single'">.$(GameVersion)</_ResolvedDataProjectsFileNameSuffix>
    <_ResolvedDataProjectsFileNameSuffix Condition="'$(_EffectiveGameVersionType)' == 'Multiple'">.$(DefaultGameVersion)</_ResolvedDataProjectsFileNameSuffix>
    <_ResolvedPropertiesProjectFilePath>$(_FullIntermediateOutputPath)$(MSBuildProjectName).ResolvedGameProperties$(_ResolvedDataProjectsFileNameSuffix).targets</_ResolvedPropertiesProjectFilePath>
    <_ResolvedReferencesProjectFilePath>$(_FullIntermediateOutputPath)$(MSBuildProjectName).ResolvedReferences$(_ResolvedDataProjectsFileNameSuffix).targets</_ResolvedReferencesProjectFilePath>
    <_GamePropertiesChangeTimestampFilePath>$(_FullIntermediateOutputPath)$(MSBuildProjectName).GamePropertiesChange$(_ResolvedDataProjectsFileNameSuffix).timestamp</_GamePropertiesChangeTimestampFilePath>
    <_ShouldLoadResolvedGameData Condition="'$(_EffectiveGameVersionType)' != 'Multiple' or ('$(DesignTimeBuild)' == 'true' and '$(DefaultGameVersion)' != '')">true</_ShouldLoadResolvedGameData>
  </PropertyGroup>

  <ItemGroup>
    <_PreExistingReference Include="@(Reference)" />
  </ItemGroup>

  <ImportGroup Condition="'$(_ShouldLoadResolvedGameData)' == 'true'">
    <Import Project="$(_ResolvedPropertiesProjectFilePath)" Condition="Exists('$(_ResolvedPropertiesProjectFilePath)')" />
    <Import Project="$(_ResolvedReferencesProjectFilePath)" Condition="Exists('$(_ResolvedReferencesProjectFilePath)')" />
  </ImportGroup>

  <PropertyGroup Condition="'$(_EffectiveGameVersionType)' == 'Multiple'">  
    <_BuildSpecificGameVersionsTarget Condition="'$(DesignTimeBuild)' == 'true'">GetGamePropertiesAndReferences</_BuildSpecificGameVersionsTarget>
    <_BuildSpecificGameVersionsTarget Condition="'$(DesignTimeBuild)' != 'true'">Build</_BuildSpecificGameVersionsTarget>
  </PropertyGroup>

  <PropertyGroup Condition="'$(_EffectiveGameVersionType)' == 'Multiple'">
    <BuildDependsOn>
      CoreBuild
    </BuildDependsOn>
    <CoreBuildDependsOn>
      _ErrorOnInconsistentGameVersion;
      _ErrorOnSanitizedGameVersionClash;
      BuildSpecificGameVersions
    </CoreBuildDependsOn>
    <RebuildDependsOn>
      Clean;
      Build
    </RebuildDependsOn>
    <CleanDependsOn>
      CleanSpecificGameVersions;
      CoreClean
    </CleanDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <UpToDateCheckBuilt Include="$(_ResolvedPropertiesProjectFilePath)" Original="$(GameRegistryPath)" />
    <UpToDateCheckBuilt Include="$(_ResolvedReferencesProjectFilePath)" Original="$(_GamePropertiesChangeTimestampFilePath)" />
  </ItemGroup>

  <ItemGroup Condition="'$(_EffectiveGameVersionType)' != 'Multiple'">
    <Clean Include="$(_ResolvedPropertiesProjectFilePath)" />
    <Clean Include="$(_ResolvedReferencesProjectFilePath)" />
  </ItemGroup>

  <PropertyGroup Condition="'$(_ShouldLoadResolvedGameData)' == 'true'">
<# foreach (var property in gameProperties) { #>
    <<#= property #> Condition="'$(<#= property #>)' == ''">$(_Resolved<#= property #>)</<#= property #>>
<# } #>
  </PropertyGroup>

  <PropertyGroup>
    <GamePath>$([MSBuild]::EnsureTrailingSlash('$(GamePath)'))</GamePath>
    <GameModsPath>$([MSBuild]::EnsureTrailingSlash('$(GameModsPath)'))</GameModsPath>
  </PropertyGroup>

  <PropertyGroup>
    <OutputPath>$(OutDir)</OutputPath>
    <TargetDir>$([MSBuild]::Escape($([System.IO.Path]::GetFullPath(`$([System.IO.Path]::Combine(`$(MSBuildProjectDirectory)`, `$(OutDir)`))`))))</TargetDir>
    <TargetPath>$(TargetDir)$(TargetFileName)</TargetPath>
  </PropertyGroup>

  <Target Name="_GetGameVersions" Returns="@(_AllGameVersions)" />

  <Target Name="_RemoveNetStandardReferences" BeforeTargets="BeforeBuild" Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'">
    <ItemGroup>
      <Reference Remove="@(Reference)" Condition="'%(Reference.NuGetPackageId)' == 'NETStandard.Library'" />
    </ItemGroup>
  </Target>

  <Target Name="PrepareForUpToDateCheckBuilt" BeforeTargets="CollectUpToDateCheckBuiltDesignTime" DependsOnTargets="_GetSpecificGameVersionBuildProperties" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'">
    <PropertyGroup>
      <SkipCopyBuildProduct>true</SkipCopyBuildProduct>
      <_DocumentationFileProduced>false</_DocumentationFileProduced>
      <_DebugSymbolsProduced>false</_DebugSymbolsProduced>
    </PropertyGroup>
    <ItemGroup>
      <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_PrepareForUpToDateCheckBuiltInner" Properties="GameVersion=%(_AllGameVersions.Identity);$(_SpecificGameVersionBuildProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="UpToDateCheckBuilt" />
    </MSBuild>
    <Message Text="@(UpToDateCheckBuilt)" />
  </Target>

  <Target Name="_PrepareForUpToDateCheckBuiltInner" Returns="@(UpToDateCheckBuilt)" DependsOnTargets="CompileDesignTime">
    <!-- Copied from https://github.com/dotnet/project-system/blob/77f6d69c2105929bcbbfe3532e851c41802ce802/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets#L426-L443 -->
    <ItemGroup>
      <!-- Assembly output, bin and obj -->
      <UpToDateCheckBuilt Condition="'$(CopyBuildOutputToOutputDirectory)' != 'false' and '$(SkipCopyBuildProduct)' != 'true'" Include="$(TargetPath)"/>
      <UpToDateCheckBuilt Include="@(IntermediateAssembly)"/>

      <!-- Documentation file, bin and obj -->
      <UpToDateCheckBuilt Condition="'$(_DocumentationFileProduced)'=='true'" Include="@(FinalDocFile)"/>
      <UpToDateCheckBuilt Condition="'$(_DocumentationFileProduced)'=='true'" Include="@(DocFileItem)"/>

      <!-- Symbols, bin and obj -->
      <UpToDateCheckBuilt Condition="'$(_DebugSymbolsProduced)'=='true'" Include="@(_DebugSymbolsIntermediatePath)"/>
      <UpToDateCheckBuilt Condition="'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)' != 'false'" Include="@(_DebugSymbolsOutputPath)"/>
    </ItemGroup>
  </Target>

  <Target Name="CleanResolvedData" AfterTargets="CoreClean" Condition="'$(IsSpecificGameVersionBuild)' != 'true'">
    <PropertyGroup>
<# foreach (var property in gamePropertiesToClean) { #>
      <<#= property #> Condition="'$(_UserSpecified<#= property #>)' == ''" />
<# } #>
    </PropertyGroup>
    <ItemGroup>
      <Reference Remove="@(Reference)" Condition="'%(Reference.IsImplicitlyDefinedGameReference)' == 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="_ErrorOnInconsistentGameVersion" BeforeTargets="PrepareForBuild" Condition="'$(GameVersions)' != ''">
    <ItemGroup>
      <_AllGameVersionsIncludingCurrent Include="@(_AllGameVersions)" />
      <_AllGameVersionsIncludingCurrent Include="$(GameVersion)" KeepDuplicates="false" Condition="'$(GameVersion)' != ''" />
      <_AllGameVersionsIncludingDefault Include="@(_AllGameVersions)" />
      <_AllGameVersionsIncludingDefault Include="$(DefaultGameVersion)" KeepDuplicates="false" Condition="'$(DefaultGameVersion)' != ''" />
    </ItemGroup>
    <Error Code="UMS0001" Text="Specified GameVersion must be one of specified GameVersions." Condition="@(_AllGameVersionsIncludingCurrent->Count()) > @(_AllGameVersions->Count())" />
    <Error Code="UMS0001" Text="Specified DefaultGameVersion must be one of specified GameVersions." Condition="@(_AllGameVersionsIncludingDefault->Count()) > @(_AllGameVersions->Count())" />
  </Target>

  <Target Name="ResolveDefaultGameVersion" Condition="'$(_UserSpecifiedDefaultGameVersion)' == ''" Inputs="$(MSBuildAllProjects)" Outputs="$(_DefaultGameVersionProjectFilePath)">
    <PropertyGroup>
      <DefaultGameVersion>%(_AllGameVersions.Identity)</DefaultGameVersion>
    </PropertyGroup>
    <ItemGroup>
      <_ResolvedDefaultGameVersionProperty Include="_ResolvedDefaultGameVersion" Value="$(DefaultGameVersion)" />
    </ItemGroup>
    <UpdateProjectFile ProjectFile="$(_DefaultGameVersionProjectFilePath)" Properties="@(_ResolvedDefaultGameVersionProperty)" />
  </Target>

  <Target Name="CheckOutputPaths" BeforeTargets="PrepareForBuild" Condition="'$(_SpecifiedGameVersionType)' == 'Multiple'" Inputs="$(MSBuildAllProjects)" Outputs="$(_OutputPathsCheckResultProjectFilePath)">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GetIntermediateOutputPathForGameVersion" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true">
      <Output TaskParameter="TargetOutputs" ItemName="_AllIntermediateOutputPaths" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="_GetOutDirForGameVersion" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true">
      <Output TaskParameter="TargetOutputs" ItemName="_AllOutDirs" />
    </MSBuild>
    <PropertyGroup>
      <HasIntermediateOutputPathClash Condition="'$(HasIntermediateOutputPathClash)' == ''">false</HasIntermediateOutputPathClash>
      <HasIntermediateOutputPathClash Condition="@(_AllGameVersions->Count()) != @(_AllIntermediateOutputPaths->Distinct()->Count())">true</HasIntermediateOutputPathClash>
      <HasOutDirClash Condition="'$(HasOutDirClash)' == ''">false</HasOutDirClash>
      <HasOutDirClash Condition="@(_AllGameVersions->Count()) != @(_AllOutDirs->Distinct()->Count())">true</HasOutDirClash>
    </PropertyGroup>
    <ItemGroup>
      <_OutputPathsCheckResult Include="HasIntermediateOutputPathClash" Value="$(HasIntermediateOutputPathClash)" />
      <_OutputPathsCheckResult Include="HasOutDirClash" Value="$(HasOutDirClash)" />
    </ItemGroup>
    <UpdateProjectFile ProjectFile="$(_OutputPathsCheckResultProjectFilePath)" Properties="@(_OutputPathsCheckResult)" />
  </Target>

  <Target Name="_GetIntermediateOutputPathForGameVersion" Returns="$(IntermediateOutputPath)" />

  <Target Name="_GetOutDirForGameVersion" Returns="$(OutDir)" />

  <Target Name="_GetSpecificGameVersionBuildProperties" DependsOnTargets="CheckOutputPaths">
    <PropertyGroup>
      <_SpecificGameVersionBuildProperties>
        IsSpecificGameVersionBuild=true;
        HasIntermediateOutputPathClash=$(HasIntermediateOutputPathClash);
        HasOutDirClash=$(HasOutDirClash)
      </_SpecificGameVersionBuildProperties>
      <_SpecificGameVersionBuildProperties Condition="'$(DesignTimeBuild)' == 'true'">
        $(_SpecificGameVersionBuildProperties);
        SkipCompilerExecution=true;
        ProvideCommandLineArgs=true
      </_SpecificGameVersionBuildProperties>
    </PropertyGroup>
  </Target>

  <Target Name="BuildSpecificGameVersions" DependsOnTargets="_GetSpecificGameVersionBuildProperties;ResolveDefaultGameVersion" Returns="@(SpecificGameVersionOutput)">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="$(_BuildSpecificGameVersionsTarget)" Condition="'$(GameVersion)' == ''"
             Properties="GameVersion=%(_AllGameVersions.Identity);$(_SpecificGameVersionBuildProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="SpecificGameVersionOutput" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="$(_BuildSpecificGameVersionsTarget)" Condition="'$(GameVersion)' != ''"
             Properties="GameVersion=$(GameVersion);$(_SpecificGameVersionBuildProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="SpecificGameVersionOutput" />
    </MSBuild>
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker Include="@(SpecificGameVersionOutput)" />
    </ItemGroup>
  </Target>
  
  <Target Name="CleanSpecificGameVersions">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Clean" Properties="GameVersion=%(_AllGameVersions.Identity);IsSpecificGameVersionBuild=true" />
  </Target>

  <Target Name="_SanitizeGameVersion" BeforeTargets="PrepareForBuild" Condition="'$(_EffectiveGameVersionType)' == 'Single'">
    <SanitizeGameVersion Version="$(GameVersion)">
      <Output TaskParameter="SanitizedVersion" PropertyName="SanitizedGameVersion" />
    </SanitizeGameVersion>
  </Target>

  <Target Name="AddGameVersionDefineConstants" AfterTargets="AddImplicitDefineConstants" Condition="'$(_EffectiveGameVersionType)' == 'Single'">
    <GetGameVersionDefineConstants Versions="@(_AllGameVersionsForAllTargetFrameworks)" CurrentVersion="$(GameVersion)">
      <Output TaskParameter="DefineConstants" PropertyName="_GameVersionDefineConstants" />
    </GetGameVersionDefineConstants>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);$(_GameVersionDefineConstants)</DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="ResolveGameProperties" BeforeTargets="GamePropertiesResolved" Condition="'$(UseGameRegistry)' == 'true' and '$(_EffectiveGameVersionType)' != 'Multiple'" 
          Inputs="$(GameRegistryPath);$(MSBuildAllProjects)" Outputs="$(_ResolvedPropertiesProjectFilePath)">
    <PropertyGroup>
      <_PreviousGamePath>$(_ResolvedGamePath)</_PreviousGamePath>
    </PropertyGroup>
    <ItemGroup>
      <GameLookupProperty Include="Id" Value="$(GameInstanceId)" Condition="'$(GameInstanceId)' != ''" />
      <GameLookupProperty Include="GameName" Value="$(GameName)" Condition="'$(GameName)' != ''" />
      <GameLookupProperty Include="Version" Value="$(GameVersion)" Condition="'$(GameVersion)' != ''" />
    </ItemGroup>
    <ResolveGameProperties LookupProperties="@(GameLookupProperty)" BuildingInsideVisualStudio="$(BuildingInsideVisualStudio)" GameRegistryPath="$(GameRegistryPath)">
<# foreach (var property in gameProperties) { #>
      <Output TaskParameter="<#= property #>" PropertyName="_Resolved<#= property #>" />
<# } #>
    </ResolveGameProperties>
    <ItemGroup>
<# foreach (var property in gameProperties) { #>
      <_ResolvedProperty Include="_Resolved<#= property #>" Value="$(_Resolved<#= property #>)" Condition="'$(_Resolved<#= property #>)' != ''" />
<# } #>
    </ItemGroup>
    <UpdateProjectFile ProjectFile="$(_ResolvedPropertiesProjectFilePath)" Properties="@(_ResolvedProperty)" />
    <Touch Files="$(_ResolvedPropertiesProjectFilePath)" />

    <PropertyGroup>
      <_GamePathChanged Condition="'$(_ResolvedGamePath)' != '$(_PreviousGamePath)'">true</_GamePathChanged>
    </PropertyGroup>

    <PropertyGroup>
<# foreach (var property in gameProperties) { #>
      <<#= property #> Condition="'$(_UserSpecified<#= property #>)' == ''">$(_Resolved<#= property #>)</<#= property #>>
<# } #>
    </PropertyGroup>
  </Target>

  <Target Name="GamePropertiesResolved" />

  <Target Name="UpdateGamePropertiesChangeTimestamp" BeforeTargets="ResolveGameAssemblyReferences" 
          Condition="'$(_EffectiveGameVersionType)' != 'Multiple' and ('$(_GamePathChanged)' == 'true' or !Exists('$(_GamePropertiesChangeTimestampFilePath)'))">
    <Touch Files="$(_GamePropertiesChangeTimestampFilePath)" AlwaysCreate="true" />
  </Target>

  <Target Name="ResolveGameAssemblyReferences" BeforeTargets="ResolveAssemblyReferences;GameAssemblyReferencesResolved" DependsOnTargets="GamePropertiesResolved" 
          Inputs="$(_GamePropertiesChangeTimestampFilePath);$(MSBuildAllProjects)" Outputs="$(_ResolvedReferencesProjectFilePath)" Condition="'$(_EffectiveGameVersionType)' != 'Multiple'">
    <CreateProperty Value="true">
      <Output TaskParameter="ValueSetByTask" PropertyName="_ResolveGameAssemblyReferencesIsRunning" />
    </CreateProperty>

    <ItemGroup Condition="'$(_ResolveGameAssemblyReferencesIsRunning)' == 'true'">
      <Reference Remove="@(Reference->WithMetadataValue('IsImplicitlyDefinedGameReference', 'true'))" />
    </ItemGroup>

    <ResolveGameAssemblyReferences GamePath="$(GamePath)" TargetFramework="$(TargetFramework)" ExistingReferences="@(_PreExistingReference)">
      <Output TaskParameter="Architecture" PropertyName="GameArchitecture" />
      <Output TaskParameter="ReferencesToAdd" ItemName="_GameReferencesToAdd" />
      <Output TaskParameter="ReferencesToUpdate" ItemName="_GameReferencesToUpdate" />
      <Output TaskParameter="ReferencesToRemove" ItemName="_GameReferencesToRemove" />
    </ResolveGameAssemblyReferences>

    <ItemGroup>
      <_ResolvedReferenceProperty Include="GameArchitecture" Value="$(GameArchitecture)" />
      <_GameReferenceToSave Include="@(_GameReferencesToAdd)" ItemName="Reference" ItemAction="Include" IncludeMetadata="HintPath;Private;IsImplicitlyDefined;IsImplicitlyDefinedGameReference"
                            Condition="'$(DisableImplicitFrameworkReferences)' != 'true'" />
      <_GameReferenceToSave Include="@(_GameReferencesToUpdate)" ItemName="Reference" ItemAction="Update" IncludeMetadata="HintPath;Private" />
      <_GameReferenceToSave Include="@(_GameReferencesToRemove)" ItemName="Reference" ItemAction="Remove" />
    </ItemGroup>

    <ItemGroup Condition="'$(_ResolveGameAssemblyReferencesIsRunning)' == 'true'">
      <Reference Remove="@(_GameReferencesToRemove)" />
      <Reference Update="@(_GameReferencesToUpdate)" HintPath="%(_GameReferencesToUpdate.HintPath)" Private="%(_GameReferencesToUpdate.Private)" />
      <Reference Include="@(_GameReferencesToAdd)" Condition="'$(DisableImplicitFrameworkReferences)' != 'true'" />
    </ItemGroup>

    <UpdateProjectFile ProjectFile="$(_ResolvedReferencesProjectFilePath)" Properties="@(_ResolvedReferenceProperty)" Items="@(_GameReferenceToSave)" ItemNames="Reference">
      <!-- Property name must correspond to one in UnityModStudio.ProjectSystem.BuildLoggerProvider -->
      <Output TaskParameter="HasWrittenProjectFile" PropertyName="_ReEvaluationRequired" />
    </UpdateProjectFile>
  </Target>

  <Target Name="GameAssemblyReferencesResolved" />

  <Target Name="PrepareModPaths" DependsOnTargets="GamePropertiesResolved">
    <PropertyGroup>
      <GameModsPath Condition="'$(GameModsPath)' == ''">.\</GameModsPath>
    </PropertyGroup>
    <CombinePath BasePath="$(GamePath)" Paths="$(GameModsPath)">
      <Output TaskParameter="CombinedPaths" PropertyName="GameModsPath" />
    </CombinePath>

    <PropertyGroup>
      <ModTargetPath Condition="'$(ModTargetPath)' == ''">$(GameModsPath)$(ProjectName)\</ModTargetPath>
      <ModSourcePath Condition="'$(ModSourcePath)' == ''">$(TargetDir)</ModSourcePath>
    </PropertyGroup>

    <ConvertToAbsolutePath Paths="$(ModSourcePath)">
      <Output TaskParameter="AbsolutePaths" PropertyName="ModSourcePath" />
    </ConvertToAbsolutePath>

    <ItemGroup>
      <_CompiledModAssembly Include="$(TargetDir)$(TargetFileName)" />
    </ItemGroup>
    <ResolveTargetPath RelativeToPath="$(ModSourcePath)" Input="@(_CompiledModAssembly)">
      <Output TaskParameter="Output" ItemName="_ResolvedCompiledModAssembly" />
    </ResolveTargetPath>
    <PropertyGroup>
      <DeployedModAssemblyPath>$(ModTargetPath)%(_ResolvedCompiledModAssembly.TargetPath)$(TargetFileName)</DeployedModAssemblyPath>
    </PropertyGroup>
  </Target>

  <Target Name="GetModSourceCodeFiles" BeforeTargets="CopyModFilesToGame" DependsOnTargets="PrepareModPaths" Condition="'$(DeploySourceCode)' == 'true'">
    <ItemGroup>
      <_IgnoreListFile Include="$(ModSourcePath)**\.gitignore" />
      <_IgnoreListFile Include="$(MSBuildThisFileDirectory)..\tools\default.gitignore" Condition="'@(_IgnoreListFile)' == ''" />
    </ItemGroup>
    <GetIgnoredFiles Directory="$(ModSourcePath)" IgnoreListFiles="@(_IgnoreListFile)">
      <Output TaskParameter="IgnoredFiles" ItemName="_IgnoredFile" />
    </GetIgnoredFiles>

    <ItemGroup>
      <ModSourceCodeFile Include="$(ModSourcePath)**\*" Exclude="@(_IgnoredFile);$(TargetDir)**" />
    </ItemGroup>

    <Warning Code="UMS0004" Text="No source code files found." Condition="'@(ModSourceCodeFile)' == ''" />
  </Target>

  <!-- Not so fun fact: formerly named CopyModToGame, that name broke MSBuild somehow -->
  <Target Name="CopyModFilesToGame" AfterTargets="PrepareForRun" DependsOnTargets="PrepareModPaths" Condition="'$(ModDeploymentMode)' == 'Copy'">
    <ItemGroup>
      <_ModCompiledOutput Include="$(TargetDir)**\*" />
      <_ModContentFile Include="@(Content)" />
      <ModExcludedFile />
      <ModFile Include="%(_ModCompiledOutput.FullPath)" KeepDuplicates="false" />
      <ModFile Include="%(_ModContentFile.FullPath)" KeepDuplicates="false" />
      <ModFile Include="%(ModSourceCodeFile.FullPath)" KeepDuplicates="false" />
      <ModFile Remove="%(ModExcludedFile.FullPath)" />
    </ItemGroup>
    <ResolveTargetPath RelativeToPath="$(ModSourcePath)" Input="@(ModFile)">
      <Output TaskParameter="Output" ItemName="_ModFileToCopy" />
    </ResolveTargetPath>
    
    <GetSymbolicLinkTarget SymbolicLink="$(ModTargetPath)">
      <Output TaskParameter="Target" PropertyName="_ModTargetPathLinkTarget" />
    </GetSymbolicLinkTarget>
    <DeleteSymbolicLink Path="$(ModTargetPath)" Condition="Exists('$(ModTargetPath)') and '$(_ModTargetPathLinkTarget)' != ''" />

    <MakeDir Directories="$(ModTargetPath)" Condition="!Exists('$(ModTargetPath)')" />
    <Copy SourceFiles="@(_ModFileToCopy->HasMetadata('TargetPath'))" DestinationFolder="$(ModTargetPath)%(TargetPath)" SkipUnchangedFiles="true">
      <Output TaskParameter="CopiedFiles" ItemName="_FileCopiedToModTargetPath" />
    </Copy>

    <ItemGroup>
      <_FileToRemoveFromModTargetPath Include="$(ModTargetPath)**\*" />
      <_FileToRemoveFromModTargetPath Remove="@(_FileCopiedToModTargetPath)" MatchOnMetadata="FullPath" />
    </ItemGroup>
    <Delete Files="@(_FileToRemoveFromModTargetPath)" />
    <RemoveEmptyDirectories Directories="$(ModTargetPath)" />
  </Target>

  <Target Name="LinkModToGame" AfterTargets="PrepareForRun" DependsOnTargets="PrepareModPaths" Condition="'$(ModDeploymentMode)' == 'Link'">
    <GetSymbolicLinkTarget SymbolicLink="$(ModTargetPath)">
      <Output TaskParameter="Target" PropertyName="_ModTargetPathLinkTarget" />
    </GetSymbolicLinkTarget>
    <ConvertToAbsolutePath Paths="$(_ModTargetPathLinkTarget)" Condition="'$(_ModTargetPathLinkTarget)' != ''">
      <Output TaskParameter="AbsolutePaths" PropertyName="_ModTargetPathLinkTarget" />
    </ConvertToAbsolutePath>
    <RemoveDir Directories="$(ModTargetPath)" Condition="Exists('$(ModTargetPath)') and '$(_ModTargetPathLinkTarget)' == ''" />
    <DeleteSymbolicLink Path="$(ModTargetPath)" Condition="Exists('$(ModTargetPath)') and '$(_ModTargetPathLinkTarget)' != '' and '$(_ModTargetPathLinkTarget)' != '$(ModSourcePath)'" />

    <CreateSymbolicLink Target="$(ModSourcePath)" SymbolicLink="$(ModTargetPath)" Condition="!Exists('$(ModTargetPath)')" />
    
  </Target>

  <Target Name="DeployDoorstop" DependsOnTargets="GamePropertiesResolved;GameAssemblyReferencesResolved" Condition="'$(DoorstopMode)' != '' and '$(DoorstopMode)' != 'Disabled'">
    <ItemGroup>
      <DoorstopNativeFile Include="$(MSBuildThisFileDirectory)..\runtimes\win-x86\native\**" Condition="'$(GameArchitecture)' == 'X86'" />
      <DoorstopNativeFile Include="$(MSBuildThisFileDirectory)..\runtimes\win-x64\native\**" Condition="'$(GameArchitecture)' == 'X64'" />
      <DoorstopContentFile Include="$(MSBuildThisFileDirectory)..\content\**" />
    </ItemGroup>

    <Error Code="UMS0003" Text="No Unity Doorstop native files available for architecture '$(GameArchitecture)'" Condition="'@(DoorstopNativeFile)' == ''" />

    <PropertyGroup>
      <_PrimaryDoorstopDllPath>$(GamePath)winhttp.dll</_PrimaryDoorstopDllPath>
      <_AlternateDoorstopDllPath>$(GamePath)version.dll</_AlternateDoorstopDllPath>
    </PropertyGroup>

    <Copy SourceFiles="@(DoorstopNativeFile)" DestinationFolder="$(GamePath)" SkipUnchangedFiles="True" Condition="!Exists('$(_PrimaryDoorstopDllPath)') and !Exists('$(_AlternateDoorstopDllPath)')" />
    <Move SourceFiles="$(_PrimaryDoorstopDllPath)" DestinationFiles="$(_AlternateDoorstopDllPath)" Condition="Exists('$(_PrimaryDoorstopDllPath)') and '$(UseAlternateDoorstopDllName)' == 'True'" />
    <Move SourceFiles="$(_AlternateDoorstopDllPath)" DestinationFiles="$(_PrimaryDoorstopDllPath)" Condition="Exists('$(_AlternateDoorstopDllPath)') and '$(UseAlternateDoorstopDllName)' != 'True'" />
    <Copy SourceFiles="@(DoorstopContentFile)" DestinationFolder="$(GamePath)" Condition="!Exists('$(GamePath)%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="ConfigureDoorstop" AfterTargets="CopyModFilesToGame;LinkModToGame" DependsOnTargets="DeployDoorstop;PrepareModPaths" Condition="'$(DoorstopMode)' != '' and '$(DoorstopMode)' != 'Disabled'">
    <PropertyGroup>
      <DoorstopConfigFile>$(GamePath)doorstop_config.ini</DoorstopConfigFile>
      <_UseDoorstopForModLoading>false</_UseDoorstopForModLoading>
      <_UseDoorstopForModLoading Condition="'$(DoorstopMode)' == 'DebuggingAndModLoading'">true</_UseDoorstopForModLoading>
    </PropertyGroup>

    <ConfigureDoorstop ConfigPath="$(DoorstopConfigFile)" TargetAssemblyPath="$(DeployedModAssemblyPath)" UseForModLoading="$(_UseDoorstopForModLoading)" />
  </Target>

  <Target Name="_CollectPathsFromSpecificGameVersionBuilds">
    <ItemGroup>
      <_AllTargetDirs Include="@(SpecificGameVersionOutput->'%(RootDir)%(Directory)')" KeepDuplicates="false" />
      <_AllModTargetPaths Include="@(SpecificGameVersionOutput->'%(ModTargetPath)')" KeepDuplicates="false" Condition="'%(SpecificGameVersionOutput.ModDeploymentMode)' == 'Copy'" />
    </ItemGroup>
  </Target>

  <Target Name="CopyOtherGameVersionsCompiledOutput" AfterTargets="BuildSpecificGameVersions" DependsOnTargets="_CollectPathsFromSpecificGameVersionBuilds;_CopyOtherGameVersionsCompiledOutput"
          Condition="'$(DesignTimeBuild)' != 'true' and '$(IsInnerBuild)' != 'true' and '$(GameVersion)' == ''" />

  <Target Name="CreateGameSpecificProperties" AfterTargets="BuildSpecificGameVersions" Condition="'$(IsInnerBuild)' != 'true'"
          Inputs="$(GameRegistryPath);$(MSBuildAllProjects)" Outputs="$(_GameSpecificPropertiesProjectFilePath)">
    <ItemGroup>
      <_GameSpecificProperty Include="@(SpecificGameVersionOutput->'GamePath_%(SanitizedGameVersion)')" Value="%(SpecificGameVersionOutput.GamePath)" />
      <_GameSpecificProperty Include="@(SpecificGameVersionOutput->'GameExecutableFileName_%(SanitizedGameVersion)')" Value="%(SpecificGameVersionOutput.GameExecutableFileName)" />
      <_GameSpecificProperty Include="@(SpecificGameVersionOutput->'DoorstopMode_%(SanitizedGameVersion)')" Value="%(SpecificGameVersionOutput.DoorstopMode)" />
    </ItemGroup>
    <UpdateProjectFile ProjectFile="$(_GameSpecificPropertiesProjectFilePath)" Properties="@(_GameSpecificProperty)">
      <!-- Property name must correspond to one in UnityModStudio.ProjectSystem.BuildLoggerProvider -->
      <Output TaskParameter="HasWrittenProjectFile" PropertyName="_ReEvaluationRequired" />
    </UpdateProjectFile>
  </Target>

  <Target Name="_AddGameSpecificMetadata" AfterTargets="AfterBuild" DependsOnTargets="PrepareModPaths">
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker GameVersion="$(GameVersion)" SanitizedGameVersion="$(SanitizedGameVersion)" GamePath="$(GamePath)" GameExecutableFileName="$(GameExecutableFileName)"
                                           DoorstopMode="$(DoorstopMode)" ModDeploymentMode="$(ModDeploymentMode)" ModSourcePath="$(ModSourcePath)" ModTargetPath="$(ModTargetPath)" />
    </ItemGroup>
  </Target>

  <Target Name="GetGamePropertiesAndReferences" DependsOnTargets="GameAssemblyReferencesResolved" Returns="@(SpecificGameVersionOutput)">
    <ItemGroup>
      <SpecificGameVersionOutput Include="@(Reference)" OutputType="Reference" />
      <SpecificGameVersionOutput Include="GameVersion" Value="$(GameVersion)" OutputType="GameProperty" />
      <SpecificGameVersionOutput GameVersion="$(GameVersion)" />
    </ItemGroup>
  </Target>

  <Target Name="_ReplaceAssemblyReferences" BeforeTargets="ResolveAssemblyReferences" DependsOnTargets="BuildSpecificGameVersions" Condition="'$(DesignTimeBuild)' == 'true' and '$(_EffectiveGameVersionType)' == 'Multiple'">
    <ItemGroup>
      <Reference Remove="@(Reference)" Condition="'%(Reference.IsImplicitlyDefined)' == 'true'" />
      <Reference Include="@(SpecificGameVersionOutput)" Condition="'%(SpecificGameVersionOutput.OutputType)' == 'Reference' and '%(SpecificGameVersionOutput.GameVersion)' == '$(DefaultGameVersion)'" />
    </ItemGroup>
    <PropertyGroup>
      <GameVersion Condition="'$(GameVersion)' == '' and '%(SpecificGameVersionOutput.OutputType)' == 'GameProperty' and '%(SpecificGameVersionOutput.GameVersion)' == '$(DefaultGameVersion)'">%(SpecificGameVersionOutput.Value)</GameVersion>
    </PropertyGroup>
  </Target>

</Project>